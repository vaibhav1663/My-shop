// Generated by view binder compiler. Do not edit!
package com.example.myshop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myshop.R;
import com.makeramen.roundedimageview.RoundedImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MyCartItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView cartDatetime;

  @NonNull
  public final ImageView cartDelete;

  @NonNull
  public final RoundedImageView cartImg;

  @NonNull
  public final TextView cartName;

  @NonNull
  public final TextView cartPrice;

  @NonNull
  public final TextView cartPriceTextOnly;

  @NonNull
  public final TextView cartQuantity;

  @NonNull
  public final TextView cartQuantityTextOnly;

  @NonNull
  public final TextView cartTotalPrice;

  @NonNull
  public final TextView cartTotalPriceTextOnly;

  private MyCartItemBinding(@NonNull CardView rootView, @NonNull TextView cartDatetime,
      @NonNull ImageView cartDelete, @NonNull RoundedImageView cartImg, @NonNull TextView cartName,
      @NonNull TextView cartPrice, @NonNull TextView cartPriceTextOnly,
      @NonNull TextView cartQuantity, @NonNull TextView cartQuantityTextOnly,
      @NonNull TextView cartTotalPrice, @NonNull TextView cartTotalPriceTextOnly) {
    this.rootView = rootView;
    this.cartDatetime = cartDatetime;
    this.cartDelete = cartDelete;
    this.cartImg = cartImg;
    this.cartName = cartName;
    this.cartPrice = cartPrice;
    this.cartPriceTextOnly = cartPriceTextOnly;
    this.cartQuantity = cartQuantity;
    this.cartQuantityTextOnly = cartQuantityTextOnly;
    this.cartTotalPrice = cartTotalPrice;
    this.cartTotalPriceTextOnly = cartTotalPriceTextOnly;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static MyCartItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MyCartItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.my_cart_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MyCartItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cart_datetime;
      TextView cartDatetime = ViewBindings.findChildViewById(rootView, id);
      if (cartDatetime == null) {
        break missingId;
      }

      id = R.id.cart_delete;
      ImageView cartDelete = ViewBindings.findChildViewById(rootView, id);
      if (cartDelete == null) {
        break missingId;
      }

      id = R.id.cart_img;
      RoundedImageView cartImg = ViewBindings.findChildViewById(rootView, id);
      if (cartImg == null) {
        break missingId;
      }

      id = R.id.cart_name;
      TextView cartName = ViewBindings.findChildViewById(rootView, id);
      if (cartName == null) {
        break missingId;
      }

      id = R.id.cart_price;
      TextView cartPrice = ViewBindings.findChildViewById(rootView, id);
      if (cartPrice == null) {
        break missingId;
      }

      id = R.id.cart_price_text_only;
      TextView cartPriceTextOnly = ViewBindings.findChildViewById(rootView, id);
      if (cartPriceTextOnly == null) {
        break missingId;
      }

      id = R.id.cart_quantity;
      TextView cartQuantity = ViewBindings.findChildViewById(rootView, id);
      if (cartQuantity == null) {
        break missingId;
      }

      id = R.id.cart_quantity_text_only;
      TextView cartQuantityTextOnly = ViewBindings.findChildViewById(rootView, id);
      if (cartQuantityTextOnly == null) {
        break missingId;
      }

      id = R.id.cart_total_price;
      TextView cartTotalPrice = ViewBindings.findChildViewById(rootView, id);
      if (cartTotalPrice == null) {
        break missingId;
      }

      id = R.id.cart_total_price_text_only;
      TextView cartTotalPriceTextOnly = ViewBindings.findChildViewById(rootView, id);
      if (cartTotalPriceTextOnly == null) {
        break missingId;
      }

      return new MyCartItemBinding((CardView) rootView, cartDatetime, cartDelete, cartImg, cartName,
          cartPrice, cartPriceTextOnly, cartQuantity, cartQuantityTextOnly, cartTotalPrice,
          cartTotalPriceTextOnly);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
